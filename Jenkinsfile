pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO = 'vicryabenko/devops01'
    }
    
    stages {
        
        stage('Test') {
            steps {
                echo 'üß™ Running tests with Maven...'
                sh 'chmod +x mvnw'
                sh './mvnw test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Build') {
            steps {
                echo 'üî® Building JAR artifact...'
                sh './mvnw clean package -DskipTests'  // –°–±–æ—Ä–∫–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
            }
            post {
                success {
                    archiveArtifacts 'target/*.jar'
                }
            }
        }
        
        stage('Docker Build & Push') {
            steps {
                echo 'üê≥ Building and pushing Docker image...'
                script {
                    // –õ–æ–≥–∏–Ω –≤ Docker Hub
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                        // –°–±–æ—Ä–∫–∞ –∏ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                        def image = docker.build("${env.DOCKER_HUB_REPO}:${env.BUILD_ID}")
                        // –ü—É—à –æ–±—Ä–∞–∑–∞
                        image.push()
                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø—É—à —Å —Ç–µ–≥–æ–º 'latest'
                        image.push('latest')
                    }
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Success! Image pushed to Docker Hub: ${env.DOCKER_HUB_REPO}:${env.BUILD_ID}"
        }
        failure {
            echo "‚ùå Pipeline failed. Check logs for details."
        }
    }
}
